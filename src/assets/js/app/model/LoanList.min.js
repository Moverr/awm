"use strict";var LoanList=function(){AbstractList.call(this);this.rootPath="/loan/v1d/";this.entityName="loan";this.storagePrefix=this.entityName+"_"};LoanList.prototype=Object.create(AbstractList.prototype,{constructor:LoanList,sorter:{value:function(b,a){return b.loanId>a.loanId},enumerable:true},addTransactions:{value:function(b,d,e,c){var a=exists(d.transactionList)&&d.transactionList.length>0?d.transactionList[d.transactionList.length-1].transactionId:0;ajax(this.rootPath+d.loanId+"/transactions/"+a,"GET",function(f){(function(h,g){if(exists(g)){h.transactionList=g;AbstractList.prototype.put.call(this,b,h,e,c)}else{console.log("could not load transactions of loan "+h.loanId)}})(d,f)})},enumerable:true},addRepaymentSchedule:{value:function(a,c,d,b){ajax(this.rootPath+c.loanId+"/repaymentSchedule","GET",function(e){(function(j,g){if(exists(g)){var f=g.rows.length;for(var h=f;h>0;h--){g.rows[h]=g.rows[h-1];g.rows[h].amortization=g.rows[h].due-g.rows[h].interest}g.rows[0]={dueDate:-1,paidDate:-1,balance:j.principal,due:-1,paid:-1,outstanding:-1,interest:-1,amortization:-1};j.repaymentSchedule=g;a.addTransactions(a,j,d,b)}else{console.log("could not load repayment schedule of loan "+j.loanId)}})(c,e)})},enumerable:true},addResponsibleLoanOfficer:{value:function(a,c,d,b){if("GROUP"===c.loanType){officerList.get(c.loanOfficer,function(e){(function(g,f){if(exists(f)){g.officer=f;a.addRepaymentSchedule(a,g,d,b)}})(c,e)})}},enumerable:true},addOwner:{value:function(a,c,d,b){if("INDIVIDUAL"===c.loanType){clientList.get(c.awamoId,function(e){(function(g,f){if(exists(f)){g.client=f;g.ownerName=f.fullname;a.addRepaymentSchedule(a,g,d,b)}})(c,e)})}else{if("GROUP"===c.loanType){groupList.get(c.awamoId,function(e){(function(g,f){if(exists(f)){g.group=f;g.ownerName=f.name;a.addResponsibleLoanOfficer(a,g,d,b)}})(c,e)})}}},enumerable:true},put:{value:function(b,a,d,c){this.addOwner(b,a,d,c)},enumerable:true},getListByStatus:{value:function(a){return this.getEntities().filter(function(b){return b.status===a})},enumerable:true},getCountByStatus:{value:function(a){return this.getEntities().reduce(function(b,c){if(c.status===a){b=b+1}return b},0)},enumerable:true},clientFilter:{value:function(a){return function(b){return b.awamoId===a}},enumerable:true},getByClient:{value:function(a){return this.entityArray.filter(this.clientFilter(a))},enumerable:true},getSubmittedCount:{value:function(){return this.getCountByStatus("SUBMITTED")},enumerable:true},getSubmittedLoanList:{value:function(){return this.getListByStatus("SUBMITTED")},enumerable:true},getApprovedLoanList:{value:function(){return this.getListByStatus("APPROVED")},enumerable:true},getRejectedCount:{value:function(){return this.getCountByStatus("REJECTED")},enumerable:true},getRejectedLoanList:{value:function(){return this.getListByStatus("REJECTED")},enumerable:true},getActiveCount:{value:function(){return this.getCountByStatus("ACTIVE")},enumerable:true},getApprovedCount:{value:function(){return this.getCountByStatus("APPROVED")},enumerable:true},getActiveLoanList:{value:function(){return this.getListByStatus("ACTIVE")},enumerable:true},getContractSignedCount:{value:function(){return this.getCountByStatus("CONTRACT_SIGNED")},enumerable:true},getContractSignedLoanList:{value:function(){return this.getListByStatus("CONTRACT_SIGNED")},enumerable:true},getDisburesmentAllowedCount:{value:function(){return this.getCountByStatus("AWAITING_DISBURSEMENT")},enumerable:true},getDisburesmentAllowedList:{value:function(){return this.getListByStatus("AWAITING_DISBURSEMENT")},enumerable:true},getLoanIds:{value:function(){return this.mainIds},enumerable:true},enrich:{value:function(a){a.mainId=a.loanId;return a},enumerable:true}});